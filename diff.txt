diff --git a/README.md b/README.md
index ba6b90c..d18568a 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
 # cats
 Computer Aided Traffic System
-This branch contains the unmodified code from the cats web site:
-http://cats4ctc.wikidot.com/
+Production branch containing changes for stacking
+
diff --git a/apps/Crandic.java b/apps/Crandic.java
index e69b6dd..0948fc4 100644
--- a/apps/Crandic.java
+++ b/apps/Crandic.java
@@ -1,7 +1,12 @@
 /* Name: Crandic.java
  *
+<<<<<<< HEAD
+ * What: 
+ *   The root program for creating the dispatcher program.
+=======
  * What:
  *   The root program for creating the dispatcher program.
+>>>>>>> a85268e3fa45aed3d4d3c6f3607c88e422a45b9b
  */
 
 package cats.apps;
diff --git a/common/VersionList.java b/common/VersionList.java
index 1d092fa..52aa021 100644
--- a/common/VersionList.java
+++ b/common/VersionList.java
@@ -29,7 +29,7 @@ public static final String CATS_VERSION = "2.40";
 /**
  * CATS date
  */
-public static final String CATS_DATE = "January 6, 2019";
+public static final String CATS_DATE = "March 26, 2019";
 /**
  * designer
  */
diff --git a/gui/DispPanel_AboutBox.java b/gui/DispPanel_AboutBox.java
index a94de01..aa278be 100644
--- a/gui/DispPanel_AboutBox.java
+++ b/gui/DispPanel_AboutBox.java
@@ -42,7 +42,7 @@ public class DispPanel_AboutBox extends JDialog implements ActionListener {
   GridLayout gridLayout1 = new GridLayout();
   String product = "CATS";
 //  public static final String VERSION = "2.15";
-  String version = "Revision " + VersionList.CATS_VERSION + " on " + VersionList.CATS_DATE;
+  String version = "Revision " + VersionList.CATS_VERSION + "-S" + " on " + VersionList.CATS_DATE;
 //  String version = "$Revision$ on $Date$";
   String copyright = "Copyright (c) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018";
   String comments = "a model railroad dispatcher panel";
diff --git a/gui/GridTile.java b/gui/GridTile.java
index 1761cf7..753e770 100644
--- a/gui/GridTile.java
+++ b/gui/GridTile.java
@@ -163,6 +163,16 @@ public class GridTile
    *
    * @see cats.layout.items.Section
    */
+  private boolean stackInProgress = false;
+
+    public boolean isStackInProgress() {
+        return stackInProgress;
+    }
+
+    public void setStackInProgress(boolean stackInProgress) {
+        this.stackInProgress = stackInProgress;
+    }
+  
   public GridTile(Section section) {
 //    super();
     MySection = section;
@@ -305,6 +315,12 @@ public class GridTile
     Frills frill;
     for (ListIterator<Frills> iter = MyFrills.listIterator(); iter.hasNext(); ) {
       frill = iter.next();
+      if(frill instanceof cats.gui.frills.LightFrill) {
+          frill.setStackColor(false); 
+          if(stackInProgress) {
+              frill.setStackColor(true);
+          }
+      }
       frill.decorate(g);
     }
   }
diff --git a/gui/Screen.java b/gui/Screen.java
index a343bfa..36d7162 100644
--- a/gui/Screen.java
+++ b/gui/Screen.java
@@ -11,10 +11,7 @@ package cats.gui;
 import cats.gui.CTCcanvas;
 import cats.gui.frills.TrainFrill;
 import cats.jmri.JmriPrefixManager;
-import cats.layout.items.Block;
-import cats.layout.items.LockedDecoders;
-import cats.layout.items.PanelSignal;
-import cats.layout.items.Section;
+import cats.layout.items.*;
 import cats.layout.xml.*;
 import cats.rr_events.MousePressEvent;
 import cats.rr_events.MouseRelEvent;
@@ -565,10 +562,17 @@ public class Screen
    * @param e describes the mouse button event.
    *
    * @see java.awt.event.MouseEvent
+   * 
+   * Modified to intercept the first mouse event during a stack request
+   * and send it to the calling CPEdge
    */
   public void mousePressed(MouseEvent e) {
+    if (CPEdge.StackingCP == null) {      
     MousePressEvent mpe = new MousePressEvent(e);
     mpe.queUp();
+    } else {
+        CPEdge.StackingCP.setEvent(e);
+  }
   }
 
   /**
diff --git a/gui/frills/Frills.java b/gui/frills/Frills.java
index b205f60..3413e6e 100644
--- a/gui/frills/Frills.java
+++ b/gui/frills/Frills.java
@@ -67,6 +67,10 @@ public abstract class Frills {
    */
   abstract public void decorate(Graphics g);
 
+   public void setStackColor(boolean stackInProgress) {
+       return;
+   }
+
   /**
    * is the method called by a GridTile whenever it is moved or its size
    * changes.  The intent is to tell the Frill that it needs to recompute
diff --git a/gui/frills/LightFrill.java b/gui/frills/LightFrill.java
index f9ba8d7..7b6ce37 100644
--- a/gui/frills/LightFrill.java
+++ b/gui/frills/LightFrill.java
@@ -43,10 +43,13 @@ public class LightFrill
    * </ul>
    * @param heads is the number of heads to be shown (1-3 heads are allowed)
    *
+   * 03/27/12 - always draw a single signal head to be prototypical
+   * @
+   * 
    * @see FrillLoc
    */
   public LightFrill(FrillLoc position, int orientation, int heads) {
-    super(position, orientation, heads);
+    super(position, orientation, 1);
   }
 
   /*
diff --git a/gui/frills/SignalFrill.java b/gui/frills/SignalFrill.java
index 80e5d9e..fa5852a 100644
--- a/gui/frills/SignalFrill.java
+++ b/gui/frills/SignalFrill.java
@@ -1,4 +1,4 @@
-/* Name: SignalFrill.java
+/* Name: SignalFri ll.java
  *
  * What:
  *   This file defines a class for placing a Signal Icon on the GridTile.
@@ -130,6 +130,8 @@ public abstract class SignalFrill
    * is the logic controlling the Icon's color.
    */
   private PanelSignal Owner;
+  
+  private boolean useStackColor = false;
 
   /**
    * constructs the SignalFrill.
@@ -171,7 +173,12 @@ public abstract class SignalFrill
   public void setOwner(PanelSignal owner) {
     Owner = owner;
   }
-
+  public void setStackColor(boolean stackInProgress) {
+      useStackColor = false;
+      if(stackInProgress) {
+          useStackColor = true;
+      }
+  }
   /*
    * is the method called by a GridTile, describing itself - the area on
    * the screen to be written to.
@@ -214,8 +221,17 @@ public abstract class SignalFrill
       else {
         y = Anchor.y;
       }
+      
+      String saveColor = SigColor.getColorTag();
+      
+      if(useStackColor) {
+        SigColor.setColor("STACK");
+        g.setColor(SigColor.getColor());
+      }
+      
       drawMast(x, y, g);
       g.setColor(oldColor);
+      SigColor.setColor(saveColor);
     }
   }
 
diff --git a/layout/ColorList.java b/layout/ColorList.java
index b973bc3..3ceb0ed 100644
--- a/layout/ColorList.java
+++ b/layout/ColorList.java
@@ -128,6 +128,11 @@ public class ColorList extends AbstractListManager {
   public static final String BACKGROUND = "BACKGROUND";
   
   /**
+   * the XML tag of the stack color.
+   */
+  public static final String STACK = "STACK";
+  
+  /**
    * the singleton that holds the ColorDefinitions
    */
   static private ColorList ColorManager;
diff --git a/layout/items/BlkEdge.java b/layout/items/BlkEdge.java
index 530e022..4c66e4b 100644
--- a/layout/items/BlkEdge.java
+++ b/layout/items/BlkEdge.java
@@ -348,6 +348,7 @@ extends SecEdge {
    */
   private int requestRoute() {
   int status = MyBlock.determineState();
+  
     BlkEdge nextBlk;
     SecEdge egress = null;
     
@@ -389,8 +390,8 @@ public boolean setupReservation() {
   if (requestRoute() <= Block.TRK_IDLE) {
     nextBlk = reserveBlock(Track.SINGLE_MOVE);
     if (nextBlk != null) {
-      nextBlk.MyReserveStrategy.makeReservation(Track.SINGLE_MOVE);
-    }
+            nextBlk.MyReserveStrategy.makeReservation(Track.SINGLE_MOVE);
+        }
     return true;
   }
   return false;
@@ -569,26 +570,56 @@ public Route makeRoute() {
  * <li>a switch is aligned against the track
  * </ul>
  * 
+ * @param optionalParms 
  * @return the SecEdge which is on the other end of the Route.
  * This cannot be null because if a track has one end, it has to
  * have at least a matching opposite.
  */
-public SecEdge findEgress() {
-  SecEdge egress = null;
-  Route e = makeRoute();
-  while (e.hasMoreElements()) {
-    if (e.isFouled()) {
-      egress = null;
-      break;
+    public SecEdge findEgress(boolean... optionalParms) {
+        boolean ignoreFouled = false;
+        if ( optionalParms.length > 0) {
+            ignoreFouled = optionalParms[0];
     }
-    egress = e.nextElement();
-  }
-  if (e.isFouled()) {
-    return null;
-  }
-  return egress;
-}
+        SecEdge egress = null;
+        Route e = makeRoute();
+        while (e.hasMoreElements()) {
+            if (e.isFouled()) {
+                //egress = null;
+                break;
+            }
+            egress = e.nextElement();
+        }
+        if (e.isFouled()) {
+            if (ignoreFouled) {
+                egress = e.nextElement();
+                return egress;
+            } else {
 
+                return null;
+            }
+        }
+        return egress;
+    }
+    
+ /**
+ * Cross the block looking for switch points, which are OS
+ * edges in CATS.  Only facing points are found.
+ * @return the OSEdge if found, null if not
+ */
+    public SecEdge findOS() {
+        SecEdge theEdge = null;
+        OSEdge OS = null;      
+        Route r = makeRoute();
+        while (r.hasMoreElements()) {            
+             theEdge = r.nextElement(); 
+             if (theEdge.getSection().getEdge(MyEdge) instanceof OSEdge){
+                 OS = (OSEdge) theEdge.getSection().getEdge(MyEdge);
+                 break;
+             }
+        }
+        return OS;
+    }
+           
 /**
  * An inner class for providing an Enumeration over the track sections
  * in a route through the Block.
diff --git a/layout/items/CPEdge.java b/layout/items/CPEdge.java
index 9012fd6..7ad2139 100644
--- a/layout/items/CPEdge.java
+++ b/layout/items/CPEdge.java
@@ -8,225 +8,475 @@
 package cats.layout.items;
 
 import cats.gui.GridTile;
+import cats.gui.CTCcanvas;
+import cats.gui.Screen;
 import cats.gui.jCustom.JListDialog;
 import java.awt.Component;
 import java.awt.event.MouseEvent;
 import java.awt.Point;
+import java.awt.Rectangle;
+import java.util.Collections;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.FutureTask;
+import java.util.Queue;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.LinkedList;
 import javax.swing.JOptionPane;
 
 /**
- * is a Control Point boundary.  A Control Point boundary is a Block boundary
- * with a visible signal.
- * <p>Title: CATS - Crandic Automated Traffic System</p>
- * <p>Description: A program for dispatching trains on Pat Lana's
- * Crandic model railroad.
- * <p>Copyright: Copyright (c) 2004, 2009, 2010</p>
- * <p>Company: </p>
+ * is a Control Point boundary. A Control Point boundary is a Block boundary
+ * with a visible signal. <p>Title: CATS - Crandic Automated Traffic System</p>
+ * <p>Description: A program for dispatching trains on Pat Lana's Crandic model
+ * railroad. <p>Copyright: Copyright (c) 2004, 2009, 2010</p> <p>Company: </p>
+ *
  * @author Rodney Black
  * @version $Revision$
  */
 public class CPEdge
-    extends BlkEdge {
+        extends BlkEdge {
 
-  /**
+    /**
    * the Labels for the Menu Items.  There are two for each item.  The
    * first is to add the item to the Signal's state and the second is
    * to remove it from the Signal's state.
-   */
-  private static final String[][] MenuItems = {
-      {
-      "Allow Traffic", "Block Traffic"}
-      , {
-      "Turn on Fleeting", "Turn off Fleeting"}
-  };
-
-  /**
-   * a placeholder for the Signal associated with a Block boundary.
-   */
-  private SecSignal MySignal;
-
-  /**
-   * is true if a train has been lined into the Block through the Edge.
-   */
-  private boolean Traffic;
-
-  /**
-   * is true if the Signal has been set to allow fleeting.
-   */
-  private boolean Fleet;
-
-  /**
-   * constructs a CPEdge with only its Edge identifier.
-   *
-   * @param edge identifies the side of the GridTile the SecEdge is on.
+     */
+    private static final String[][] MenuItems = {
+        {
+            "Allow Traffic", "Block Traffic"}, {
+            "Turn on Fleeting", "Turn off Fleeting"}, {
+            "Entrance Signal", null}, {
+            "Stack Route", "Cancel Stack"}
+    };
+
+    /**
+     * a placeholder for the Signal associated with a Block boundary.
+     */
+    private SecSignal MySignal;
+
+    /**
+     * is true if a train has been lined into the Block through the Edge.
+     */
+    private boolean Traffic;
+
+    /**
+     * is true if the Signal has been set to allow fleeting.
+     */
+    private boolean Fleet;
+    /**
+     * is true if the Signal has been cleared.
+     */
+    private boolean NX;
+    private MouseEvent me1 = null;
+    private MouseEvent me2 = null;
+    private MouseEvent signalME = null;
+    private Point cpPoint, lPoint, sigPoint;
+    private Section sigSection;
+    private Queue<Point> qp;
+    private int stackInProgress = 0;
+    private boolean cancelStackRequested = false;
+    private OSEdge OS;
+    public static CPEdge StackingCP = null;
+    private final ExecutorService ex;
+    private static Map targetMap = null;
+    private static Map blockMap = null;
+
+
+    /**
+     * constructs a CPEdge with only its Edge identifier.
+     *
+     * @param edge identifies the side of the GridTile the SecEdge is on.
    * @param shared describes the shared edge, if it is not adjacent.
    *    A null value means it is adjacent.
    * @param block is the Block definition.  If it is null, then the
    *   a default block is created, which may be overwritten during the
    *   bind process.
    * @param blkSignal is a Signal.  It may not be null.
-   */
-  public CPEdge(int edge, Edge shared, Block block, SecSignal blkSignal) {
-    super(edge, shared, block, blkSignal);
-    MySignal = blkSignal;
-    if (MySignal.getSigIcon() != null) {
-      MySignal.getSigIcon().protectEdge(this);
+     */
+    public CPEdge(int edge, Edge shared, Block block, SecSignal blkSignal) {
+        super(edge, shared, block, blkSignal);
+        MySignal = blkSignal;
+        if (MySignal.getSigIcon() != null) {
+            MySignal.getSigIcon().protectEdge(this);
+        }
+        strategyFactory();
+        
+        if (targetMap == null) {
+            targetMap = Collections.synchronizedMap(new HashMap());
+        }
+        
+        if (blockMap == null) {
+            blockMap = Collections.synchronizedMap(new HashMap());
+        }
+        
+        ex = Executors.newSingleThreadExecutor();
+//        if (qp == null)qp = new LinkedList<Point>();
+        
+        if (!blockMap.containsKey(MyBlock.getBlockName())) {
+            blockMap.put(MyBlock.getBlockName(), new LinkedList<Point>());
+        }
     }
-    strategyFactory();
-  }
-
-  /**
-   * is used to determine if a SecEdge is a Home Signal.
-   *
-   * @return true if it is and false if it is not.
-   */
-  public boolean isHomeSignal() {
+
+    /**
+     * is used to determine if a SecEdge is a Home Signal.
+     *
+     * @return true if it is and false if it is not.
+     */
+    public boolean isHomeSignal() {
     return super.isHomeSignal() || MySignal.isHS() ||
         (getBlock().getDiscipline() == Block.DTC);
-  }
-
-  /**
-   * registers the SecEdge's icon on the painting surface.
-   *
-   * @param tile is where the Frills are painted.
-   *
-   * @see cats.gui.GridTile
-   */
-  public void install(GridTile tile) {
-    EdgeTile = tile;
-    if (EdgeTile != null) {
-      MySignal.install(EdgeTile);
-      EdgeTile.setSide(MyEdge, true);
     }
-  }
 
-  /**
+    /**
+     * registers the SecEdge's icon on the painting surface.
+     *
+     * @param tile is where the Frills are painted.
+     *
+     * @see cats.gui.GridTile
+     */
+    public void install(GridTile tile) {
+        EdgeTile = tile;
+        if (EdgeTile != null) {
+            MySignal.install(EdgeTile);
+            EdgeTile.setSide(MyEdge, true);
+        }
+    }
+
+    /**
    * tells the CPEdge that it does not appear on the painting surface.
    * For a CPEdge, this means that the Signal Icon can be removed.
-   */
-  public void hidden() {
-    if (MySignal.getSigIcon() != null) {
-      MySignal.setSigIcon(null);
+     */
+    public void hidden() {
+        if (MySignal.getSigIcon() != null) {
+            MySignal.setSigIcon(null);
+        }
     }
-  }
 
-  /**
-   * handles a mouse button push when positioned over a Signal Icon.
-   *
-   * If the left mouse button is pushed, then it is interpreted as a request
+    /**
+     * handles a mouse button push when positioned over a Signal Icon.
+     *
+     * If the left mouse button is pushed, then it is interpreted as a request
    * to set traffic through the Block, beginning at this CPEdge.  If the
    * right button is pushed, then a menu is presented.
-   *
-   * @param me is the MouseEvent recording the button push/release.
-   *
-   * @see java.awt.event.MouseEvent
-   */
-  public void edgeMouse(MouseEvent me) {
-    int mods = me.getModifiers();
+     *
+     * @param me is the MouseEvent recording the button push/release.
+     *
+     * @see java.awt.event.MouseEvent
+     */
+    public void edgeMouse(MouseEvent me) {
+        int mods = me.getModifiers();
     if ( (mods & MouseEvent.BUTTON3_MASK) != 0) {
-      edgeMenu(me.getPoint());
+            edgeMenu(me.getPoint());
     }
     else if ( (mods & MouseEvent.BUTTON1_MASK) != 0) {
-      if (Reservation == ENTER_RESERVATION) {
-        handleFleet(false);
+            if (Reservation == ENTER_RESERVATION) {
+                handleFleet(false);
       }
       else if (Reservation == NO_RESERVATION) {
-        if (!setupReservation()) {
+                if (!setupReservation()) {
           JOptionPane.showMessageDialog( (Component)null,
-              "The reservation could not be made because of conflicts.",
-              "Route Reservation Error",
+                            "The reservation could not be made because of conflicts.",
+                            "Route Reservation Error",
               JOptionPane.ERROR_MESSAGE
               );
+                }
+            }
         }
-      }
-    }
-  }
-
-  /**
-   * presents the Menu of operations on the Signal.
-   *
-   * @param location is the location of the Mouse on the screen.
-   *
-   * @see cats.gui.jCustom.JListDialog
-   */
-  private void edgeMenu(Point location) {
-    String[] menu = new String[2];
-    if (Traffic) {
-      menu[0] = new String(MenuItems[0][1]);
-    }
-    else {
-      menu[0] = new String(MenuItems[0][0]);
     }
-    if (Fleet) {
-      menu[1] = new String(MenuItems[1][1]);
+
+    /**
+     * presents the Menu of operations on the Signal.
+     *
+     * @param location is the location of the Mouse on the screen.
+     *
+     * @see cats.gui.jCustom.JListDialog
+     */
+    private void edgeMenu(Point location) {
+        String[] menu = new String[5];
+        if (Traffic) {
+            menu[0] = new String(MenuItems[0][1]);
+        } else {
+            menu[0] = new String(MenuItems[0][0]);
+        }
+        if (Fleet) {
+            menu[1] = new String(MenuItems[1][1]);
     }
     else {
-      menu[1] = new String(MenuItems[1][0]);
-    }
-    switch (JListDialog.select(menu, "Traffic Operation", location)) {
-      case 0: // allow/disallow Traffic
-        Traffic = !Traffic;
-        break;
+            menu[1] = new String(MenuItems[1][0]);
+        }
 
-      case 1:
-        handleFleet(!Fleet);
-        break;
+        //menu[2] = new String(MenuItems[2][0]);
+        
+        // If the signal name contains DNS don't put the stacking
+        // option in the menu.
 
-      default:
+        if ( !this.MySignal.SigName.contains ("DNS")) {
+            menu[3] = new String(MenuItems[3][0]);
+            if (stackInProgress > 0) {
+                menu[4] = new String(MenuItems[3][1]);
+            }
+        }
+
+        switch (JListDialog.select(menu, "Traffic Operation", location)) {
+            case 0: // allow/disallow Traffic
+                Traffic = !Traffic;
+                break;
+
+            case 1:
+                handleFleet(!Fleet);
+                break;
+
+            case 2:
+                System.out.println("Setting up NX");
+                break;
+
+            case 3:
+                addStack();
+                break;
+                
+            case 4:
+                cancelStackRequested = true;
+                break;
+
+            default:
+        }
     }
-  }
 
-  /*
-   * enables or disables Fleeting through the Block from this BlkEdge.
-   *
+    /*
+     * enables or disables Fleeting through the Block from this BlkEdge.
+     *
    * @param fleet is true if Fleeting should be enabled and false if
    * it should be disabled.
-   */
-  protected void setFleet(boolean fleet) {
-    super.setFleet(fleet);
-    Fleet = fleet;
-  }
+     */
+    protected void setFleet(boolean fleet) {
+        super.setFleet(fleet);
+        Fleet = fleet;
+    }
 
-  /**
+    /**
    * sets the Fleet flag and forwards it through all Blocks, up to
    * the next Control Point.
-   *
+     *
    * @param fleet is true if fleeting is enabled and false if it is
    * to be disabled.
-   */
-  private void handleFleet(boolean fleet) {
-    BlkEdge nextBlk;
-    SecEdge egress = null;
+     */
+    private void handleFleet(boolean fleet) {
+        BlkEdge nextBlk;
+        SecEdge egress = null;
 
-    if (fleet) {
-      setupReservation();
-    }
-    else {
-      removeReservation();
+        if (fleet) {
+            setupReservation();
+        } else {
+            removeReservation();
+        }
+        for (nextBlk = this; nextBlk != null;) {
+            // This will iterate through all blocks in which requestRoute
+            // set (or cleared) a reservation.
+            if (!fleet || (nextBlk.Reservation == ENTER_RESERVATION)) {
+                nextBlk.setFleet(fleet);
+                egress = nextBlk.findEgress();
+                if ((egress != null) && egress.isBlock()) {
+                    nextBlk = (BlkEdge) egress.getNeighbor();
+                    if ((nextBlk == null) || nextBlk.isControlPoint()) {
+                        nextBlk = null;
+                    }
+                } else {
+                    nextBlk = null;
+                }
+            } else {
+                nextBlk = null;
+            }
+        }
     }
-    for (nextBlk = this; nextBlk != null; ) {
-      // This will iterate through all blocks in which requestRoute
-      // set (or cleared) a reservation.
-      if (!fleet || (nextBlk.Reservation == ENTER_RESERVATION)) {
-        nextBlk.setFleet(fleet);
-        egress = nextBlk.findEgress();
-        if ( (egress != null) && egress.isBlock()) {
-          nextBlk = (BlkEdge) egress.getNeighbor();
-          if ( (nextBlk == null) || nextBlk.isControlPoint()) {
-            nextBlk = null;
-          }
+
+    /**
+     * addStack()
+     * is a 2 pass process.  the first pass sets the calling cp and returns. 
+     * The next mouse down event is returned and checked to see if it's from a signal.
+     * If so, the stack is processed.  If not, it exits.
+     */
+    
+    private void addStack() {
+        
+        if (StackingCP == null) {
+            StackingCP = this;
+            return;
+        } else {
+            StackingCP = null;
+            stackInProgress++;
         }
+        
+        sigPoint = signalME.getPoint();
+        Section lsigSection = Screen.DispatcherPanel.locatePt(sigPoint);
+        if ((lsigSection != null ) && (lsigSection.getEdge(0).hasSignal() || 
+                lsigSection.getEdge(2).hasSignal())) {
+        } else {
+            stackInProgress--;
+            return;
+        }
+          
+        qp = (Queue) blockMap.get(MyBlock.getBlockName());
+        qp.add(sigPoint);  // add the point of the 2nd signal to the queue
+        targetMap.put(sigPoint, this);
+        ex.execute(new StackThread());
+        
+       }
+    /**
+     * setupStack
+     * is run in a separate thread.  The executor guarantees that each thread runs in the order
+     * it was executed. Mouse events are built to throw the turnout, if necessary. Current 
+     * track position is used but the target signal point is obtained from a queue.  Otherwise the
+     * target signal point will always be the last one clicked.
+     *
+     * @param me1 Created mouse down event
+     * @param me2 Created mouse release event
+     * @return
+     */
+   
+        private boolean setupStack() {
+        int mods = 16;
+        final Component lcanvas = new CTCcanvas();
+        Rectangle lRect;
+        boolean switchThrown = false;
+
+        OS = null;
+        me1 = null;
+        me2 = null;
+        Point lsigPoint = qp.peek();
+        if (!targetMap.get(lsigPoint).equals(this)) {
+            return false;
+        }
+        
+        if (cancelStackRequested) {
+            cancelStackRequested = false;
+            stackInProgress--;
+            qp.remove();
+            if (stackInProgress == 0) {
+                EdgeTile.setStackInProgress(false);    
+            }
+            
+            EdgeTile.requestUpdate();
+            EdgeTile.doUpdates();
+            return true;
+        }
+        
+        sigSection = Screen.DispatcherPanel.locatePt(lsigPoint);
+        lPoint = sigSection.getCoordinates();
+        cpPoint = MySection.getCoordinates().getLocation();
+        Section lSection = MySection;
+        
+        SecEdge theEdge = findOS();
+        
+        if (theEdge != null) { // facing point switches are handled here
+            lSection = theEdge.getSection();
+        }  
+        else {  
+            lSection = traverse().getNeighbor().getSection(); // trailing point switches are handled here
+        }
+        
+        try {
+            OS = (OSEdge) lSection.getEdge(MyEdge);
+        } catch (ClassCastException e) {
+        }
+        
+        if (!hasClearRoute()) {
+            SecEdge egress = findEgress(true); // get the section where the switchpoints are for the mouse event            
+            lRect = egress.MySection.getTile().getSize(); }
         else {
-          nextBlk = null;
+            lRect = lSection.getTile().getSize();           
         }
-      }
-      else {
-        nextBlk = null;
-      }
+            
+        me1 = new MouseEvent(lcanvas, 501, System.currentTimeMillis(), mods, lRect.x + lRect.width / 2,
+                lRect.y + lRect.height / 2, 1, false, 1);
+
+        me2 = new MouseEvent(lcanvas, 502, System.currentTimeMillis(), mods, lRect.x + lRect.width / 2,
+                lRect.y + lRect.height / 2, 1, false, 1);
+        
+
+        if(MyBlock.isReserved()) {      //facing point points aligned signal already cleared.
+        return false;
+        }
+        
+        if(!hasClearRoute()) {
+            Screen.DispatcherPanel.mousePressedAction(me1);
+            Screen.DispatcherPanel.mouseReleasedAction(me2);
+            switchThrown = true;            
+        }
+        
+        if (OS == null) {
+        } else if ((cpPoint.y == lPoint.y) && (OS.CurrentTrk == OS.NormalRoute)) {
+        } else if ((cpPoint.y != lPoint.y) && (OS.CurrentTrk != OS.NormalRoute)) {
+        } else {            
+            if ((me1 != null) && (me2 != null)) {
+                Screen.DispatcherPanel.mousePressedAction(me1);
+                Screen.DispatcherPanel.mouseReleasedAction(me2);
+                switchThrown = true;
+            }   
+        } 
+        
+ /* The following sleep fixes a problem with stacking where the setupReservation always failed and 
+        the switch was therefore always moved back if it was thrown.  For a simple
+        sleep to work there must have been thread contention.
+        */
+        if (switchThrown) {
+             try {
+                Thread.sleep(20);
+            } catch (InterruptedException e) {} 
+        }
+
+        if (!setupReservation()) {
+            if (switchThrown) {
+                // we threw the switch and then couldn't make the reservation.  throw it back.
+                Screen.DispatcherPanel.mousePressedAction(me1);
+                Screen.DispatcherPanel.mouseReleasedAction(me2);
+            }
+            return false;
+        }
+        qp.remove();  // only remove the point from the queue when the reservation has been made.
+        stackInProgress--;
+        if (stackInProgress == 0) EdgeTile.setStackInProgress(false);
+        return true;
     }
-  }
 
-  static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(
-      CPEdge.class.getName());
+ 
+
+    private class StackThread implements Runnable {
+
+        public void run() {
+            try {
+                while (!setupStack()) {
+                    if(stackInProgress > 0 ) {
+                        if(!EdgeTile.isStackInProgress()) {
+                            EdgeTile.setStackInProgress(true);
+                            EdgeTile.requestUpdate();
+                            EdgeTile.doUpdates();
+                        }
+                        
+                    }
+                    Thread.sleep(1000);
+                }
+            } catch (InterruptedException e) {
+                return;
+            }
+            GridTile.doUpdates();  //repaint
+        }
+    }
+
+ 
+        
+/**
+ * setEvent
+ * is invoked from the dispatcher panel during a stack setup when the user clicks
+ * on the screen, hopefully on a signal.
+ * @param e 
+ */
+    public void setEvent(MouseEvent e) {
+        signalME = e;
+        addStack();
+    }
+        
+    static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(
+            CPEdge.class.getName());
 }
 /* @(#)CPEdge.java */
\ No newline at end of file
diff --git a/layout/items/Indication.java b/layout/items/Indication.java
index f21dbf3..fe9f4d7 100644
--- a/layout/items/Indication.java
+++ b/layout/items/Indication.java
@@ -183,7 +183,8 @@ public class Indication {
       result = AspectMap.getRule(ProtSpeed, NextSpeed);
     }
     else if (Composite == Block.TRK_AND_TIME) {
-      result = AspectMap.findRule("R290");
+      // Track and Time should set signals to stop.
+      result = AspectMap.findRule("R292");
     }
     else {
       result = AspectMap.findRule("R292");
diff --git a/trains/TrainStore.java b/trains/TrainStore.java
index cd30827..5856b05 100644
--- a/trains/TrainStore.java
+++ b/trains/TrainStore.java
@@ -807,6 +807,10 @@ public class TrainStore
     FieldVector fields = FieldInfoStore.toFormatting();
     RecordVector<GenericRecord> trial = DataStore.makeCopy();
     trial.setStrategy(new LineUpSelectionStrategy());
+    /*
+     *   @todo see if I can make a non modal display of below  
+     * 
+     */
     if (TrainEditPane.editRecords(new TrainEditPane(createModel(trial, fields), true), FRAME_TITLE)) {
       updateRecords(trial);
       updateFormat(fields);
